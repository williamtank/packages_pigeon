// Autogenerated from Pigeon (v0.1.21), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import
// @dart = 2.8
import 'dart:async';
import 'dart:typed_data' show Uint8List, Int32List, Int64List, Float64List;

import 'package:flutter/services.dart';

class SearchReply {
  String result;
  List<Object> list;

  SearchReply({this.result, this.list});

  Object encode() {
    final Map<Object, Object> pigeonMap = <Object, Object>{};
    pigeonMap['result'] = result;
    pigeonMap['list'] = list;
    return pigeonMap;
  }

  static SearchReply decode(Object message) {
    final Map<Object, Object> pigeonMap = message as Map<Object, Object>;
    return SearchReply()
      ..result = pigeonMap['result'] as String
      ..list = pigeonMap['list'] as List<Object>;
  }
}

class SearchRequest {
  String query;

  SearchRequest({this.query});

  Object encode() {
    final Map<Object, Object> pigeonMap = <Object, Object>{};
    pigeonMap['query'] = query;
    return pigeonMap;
  }

  static SearchRequest decode(Object message) {
    final Map<Object, Object> pigeonMap = message as Map<Object, Object>;
    return SearchRequest()
      ..query = pigeonMap['query'] as String;
  }
}

class Person {
  String name;
  int age;

  Person({this.name, this.age});

  Object encode() {
    final Map<Object, Object> pigeonMap = <Object, Object>{};
    pigeonMap['name'] = name;
    pigeonMap['age'] = age;
    return pigeonMap;
  }

  static Person decode(Object message) {
    final Map<Object, Object> pigeonMap = message as Map<Object, Object>;
    return Person()
      ..name = pigeonMap['name'] as String
      ..age = pigeonMap['age'] as int;
  }
}

class SearchApi {
  Future<SearchReply> search(SearchRequest request, Person person, int code) async {
    Map<Object, Object> encoded = <Object, Object>{};
    encoded['request'] = request.encode();
    encoded['person'] = person.encode();
    encoded['code'] = code;
    const BasicMessageChannel<Object> channel =
        BasicMessageChannel<Object>('dev.flutter.pigeon.SearchApi.search', StandardMessageCodec());
    final Map<Object, Object> replyMap = await channel.send(encoded) as Map<Object, Object>;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object, Object> error = replyMap['error'] as Map<Object, Object>;
      throw PlatformException(
        code: error['code'] as String,
        message: error['message'] as String,
        details: error['details'],
      );
    } else {
      return SearchReply.decode(replyMap['result']);
    }
  }

  Future<bool> searchByCode(int code, Person person) async {
    Map<Object, Object> encoded = <Object, Object>{};
    encoded['code'] = code;
    encoded['person'] = person.encode();
    const BasicMessageChannel<Object> channel =
        BasicMessageChannel<Object>('dev.flutter.pigeon.SearchApi.searchByCode', StandardMessageCodec());
    final Map<Object, Object> replyMap = await channel.send(encoded) as Map<Object, Object>;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object, Object> error = replyMap['error'] as Map<Object, Object>;
      throw PlatformException(
        code: error['code'] as String,
        message: error['message'] as String,
        details: error['details'],
      );
    } else {
      return replyMap['result'];
    }
  }

  Future<String> searchByName(String name, bool needFullName) async {
    Map<Object, Object> encoded = <Object, Object>{};
    encoded['name'] = name;
    encoded['needFullName'] = needFullName;
    const BasicMessageChannel<Object> channel =
        BasicMessageChannel<Object>('dev.flutter.pigeon.SearchApi.searchByName', StandardMessageCodec());
    final Map<Object, Object> replyMap = await channel.send(encoded) as Map<Object, Object>;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null,
      );
    } else if (replyMap['error'] != null) {
      final Map<Object, Object> error = replyMap['error'] as Map<Object, Object>;
      throw PlatformException(
        code: error['code'] as String,
        message: error['message'] as String,
        details: error['details'],
      );
    } else {
      return replyMap['result'];
    }
  }
}
