// Autogenerated from Pigeon (v0.1.21), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "Example.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString*, id>* wrapResult(NSObject *result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ? error.code : [NSNull null]),
        @"message": (error.message ? error.message : [NSNull null]),
        @"details": (error.details ? error.details : [NSNull null]),
        };
  }
  return @{
      @"result": (result ? result : [NSNull null]),
      @"error": errorDict,
      };
}

@interface FLTReply ()
+(FLTReply*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface FLTRequest ()
+(FLTRequest*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface FLTPerson ()
+(FLTPerson*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end

@implementation FLTReply
+(FLTReply*)fromMap:(NSDictionary*)dict {
  FLTReply* result = [[FLTReply alloc] init];
  result.result = dict[@"result"];
  if ((NSNull *)result.result == [NSNull null]) {
    result.result = nil;
  }
  result.list = dict[@"list"];
  if ((NSNull *)result.list == [NSNull null]) {
    result.list = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.result ? self.result : [NSNull null]), @"result", (self.list ? self.list : [NSNull null]), @"list", nil];
}
@end

@implementation FLTRequest
+(FLTRequest*)fromMap:(NSDictionary*)dict {
  FLTRequest* result = [[FLTRequest alloc] init];
  result.query = dict[@"query"];
  if ((NSNull *)result.query == [NSNull null]) {
    result.query = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.query ? self.query : [NSNull null]), @"query", nil];
}
@end

@implementation FLTPerson
+(FLTPerson*)fromMap:(NSDictionary*)dict {
  FLTPerson* result = [[FLTPerson alloc] init];
  result.name = dict[@"name"];
  if ((NSNull *)result.name == [NSNull null]) {
    result.name = nil;
  }
  result.age = dict[@"age"];
  if ((NSNull *)result.age == [NSNull null]) {
    result.age = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.name ? self.name : [NSNull null]), @"name", (self.age ? self.age : [NSNull null]), @"age", nil];
}
@end

void FLTExampleApiSetup(id<FlutterBinaryMessenger> binaryMessenger, id<FLTExampleApi> api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ExampleApi.searchVoid"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api searchVoid:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ExampleApi.searchArgEmpty"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSString * output = [api searchArgEmpty:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ExampleApi.searchReturnEmpty"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api searchReturnEmpty:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ExampleApi.search"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSDictionary *json = (NSDictionary *) message;
        FLTRequest *request = [FLTRequest fromMap:json[@"request"]];
        FlutterError *error;
        FLTReply * output = [api search:request error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ExampleApi.searchMore"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSDictionary *json = (NSDictionary *) message;
        NSNumber *code = json[@"code"];
        int code = [code intValue];
        FLTPerson *person = [FLTPerson fromMap:json[@"person"]];
        FlutterError *error;
        BOOL output = [api searchMore:code person:person error:&error];
        NSNumber *outputObj = [NSNumber numberWithBool:output]
        callback(wrapResult(outputObj, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ExampleApi.searchMoreAsync"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSDictionary *json = (NSDictionary *) message;
        FLTString *name = [FLTString fromMap:json[@"name"]];
        NSNumber *needFullName = json[@"needFullName"];
        BOOL needFullName = [code BOOLValue];
        [api searchMoreAsync:name needFullName:needFullName completion:^(NSString * _Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ExampleApi.searchReturnAsync"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSDictionary *json = (NSDictionary *) message;
        NSNumber *code = json[@"code"];
        int code = [code intValue];
        FLTPerson *person = [FLTPerson fromMap:json[@"person"]];
        [api searchReturnAsync:code person:person completion:^(FlutterError *_Nullable error) {
          callback(error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ExampleApi.searchEmptyAsync"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api searchEmptyAsync:^(FLTReply * _Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult([output toMap], error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
